#!/usr/bin/env python3

import os
import sys
import argparse
import subprocess

from zulint import lister
from typing import List

EXCLUDE_FILES = []  # type: List[str]

TOOLS_DIR = os.path.dirname(os.path.abspath(__file__))
os.chdir(os.path.dirname(TOOLS_DIR))

sys.path.append(os.path.dirname(TOOLS_DIR))

parser = argparse.ArgumentParser(description="Run mypy on files tracked"
                                             " by git.")

parser.add_argument('targets', nargs='*', default=[],
                    help="""files and directories to include in the result.
                    If this is not specified, the current directory is used""")

parser.add_argument('-m', '--modified', action='store_true', default=False,
                    help='list only modified files')

parser.add_argument('-a', '--all', dest='all', action='store_true',
                    default=False, help="""run mypy on all python files,
                    ignoring the exclude list. This is useful if you have to
                    find out which files fail mypy check.""")

parser.add_argument('--no-disallow-untyped-defs', dest='disallow_untyped_defs',
                    action='store_false', default=True,
                    help="""Don't throw errors when functions are not
                    annotated""")

parser.add_argument('--scripts-only', dest='scripts_only',
                    action='store_true', default=False,
                    help="""Only type check extensionless python scripts""")

parser.add_argument('--no-strict-optional', dest='strict_optional',
                    action='store_false', default=True,
                    help="""Don't use the --strict-optional flag with mypy""")

parser.add_argument('--warn-unused-ignores', dest='warn_unused_ignores',
                    action='store_true', default=False,
                    help="""Use the --warn-unused-ignores flag with mypy""")

parser.add_argument('--no-ignore-missing-imports',
                    dest='ignore_missing_imports', action='store_false',
                    default=True, help="""Don't use the
                     --ignore-missing-imports flag with mypy""")

parser.add_argument('--quick', action='store_true', default=False,
                    help="""Use the --quick flag with mypy""")

args = parser.parse_args()

files_dict = lister.list_files(
    targets=args.targets, ftypes=['py'],
    use_shebang=True,
    modified_only=args.modified,
    group_by_ftype=True,
    exclude=EXCLUDE_FILES,
)


pyi_files = set(files_dict['pyi'])
python_files = [fpath for fpath in files_dict['py']
                if not fpath.endswith('.py') or fpath + 'i' not in pyi_files]

if not python_files and not pyi_files:
    print("There are no files to run mypy on.")
    sys.exit(0)

mypy_command = "mypy"

extra_args = ["--check-untyped-defs",
              "--follow-imports=silent",
              "--scripts-are-modules",
              "--disallow-any-generics",
              "-i"]
if args.disallow_untyped_defs:
    extra_args.append("--disallow-untyped-defs")
if args.warn_unused_ignores:
    extra_args.append("--warn-unused-ignores")
if args.strict_optional:
    extra_args.append("--strict-optional")
if args.ignore_missing_imports:
    extra_args.append("--ignore-missing-imports")
if args.quick:
    extra_args.append("--quick")

# run mypy
status = subprocess.call([mypy_command] + extra_args + python_files)

if status != 0:
    print("")
    print("See https://zulip.readthedocs.io/en/latest/testing/mypy.html for debugging tips.")
sys.exit(status)
